parameters:
  AksClusterName: 
  AksResourceGroupName: 
  AppGatewayName:
  AppGatewayResourceGroup: 
  AzureServiceConnection: 
  Environment: 
  GrafanaBaseUri: 
  GrafanaAdminPassword: 
  GrafanaAdminUsername:
  HelmClientVersion: 
  HelmChartVersion: 
  KeyVaultName: 
  KubectlVersion: 
  ResourceGroupLocation: 
  SubscriptionId: 
  TemplateSecrets: {}

jobs:
- deployment: DeployTo_${{ parameters.Environment }}
  environment: ${{ parameters.Environment }}
  pool:
    name: 'DAS - Continuous Integration'
    ## Windows Agent doesn't have Az module installed
    demands: Agent.OS -equals Linux
  variables:
  - name: KubernetesNamespace
    value: monitoring
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          path: 'das-grafana/'
        - task: KubectlInstaller@0
          displayName: 'Install Kubectl ${{ parameters.KubectlVersion }}'
          inputs:
            kubectlVersion: ${{ parameters.KubectlVersion }}
        - task: HelmInstaller@1
          displayName: 'Install Helm ${{ parameters.HelmClientVersion }}'
          inputs:
            helmVersionToInstall: ${{ parameters.HelmClientVersion }}
        - task: HelmDeploy@0
          displayName: 'Check application-gateway-ingress deployed'
          inputs:
            azureSubscription: '${{ parameters.AzureServiceConnection }}'
            azureResourceGroup: '${{ parameters.AksResourceGroupName }}'
            kubernetesCluster: '${{ parameters.AksClusterName }}'
            useClusterAdmin: true
            command: get
            namespace: default
            arguments: 'all application-gateway-ingress'
        - template: azure-pipelines-templates/deploy/step/arm-deploy.yml@das-platform-building-blocks
          parameters:
            Location: ${{ parameters.ResourceGroupLocation }}
            ParametersPath: $(Pipeline.Workspace)/das-grafana/azure/template.parameters.json
            ServiceConnection: ${{ parameters.AzureServiceConnection }}
            SubscriptionId: ${{ parameters.SubscriptionId }}
            TemplatePath: $(Pipeline.Workspace)/das-grafana/azure/template.json
            IsMultiRepoCheckout: true
            TemplateSecrets: ${{ parameters.TemplateSecrets }}
        ##TO DO: remove this task
        - pwsh: Get-ChildItem ENV:* | Sort-Object Name | Format-Table -AutoSize
        ##TO DO: consider handling this with reusable script  and/or step template
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell: Set StorageAccountKey variable'
          inputs:
            azureSubscription: ${{ parameters.AzureServiceConnection }}
            scriptType: inlineScript
            inline: |
              $Keys = Get-AzStorageAccountKey -ResourceGroupName $(RESOURCEGROUPNAME) -Name $(STORAGEACCOUNTNAME)
              Write-Output "##vso[task.setvariable variable=StorageAccountKey;isOutput=false]$($Keys[0].Value)"
            azurePowerShellVersion: LatestVersion
        - task: replacetokens@3
          displayName: 'Replace tokens manifests and values files'
          inputs:
            rootDirectory: '$(Pipeline.Workspace)/das-grafana'
            targetFiles: 'manifest/*.yml, config/**/*.yml, helm.yml'
            encoding: 'auto'
            writeBOM: true
            actionOnMissing: 'fail'
            keepToken: false
            tokenPrefix: '{{'
            tokenSuffix: '}}'
        - template: azure-pipelines-templates/deploy/step/kubernetes-create-namespace.yml@das-platform-building-blocks
          parameters:
            AksResourceGroupName: ${{ parameters.AksResourceGroupName }}
            AzureSubscription: ${{ parameters.AzureServiceConnection }}
            AksClusterName: ${{ parameters.AksClusterName }}
            Namespace: $(KubernetesNamespace)
        - task: Kubernetes@1
          displayName: kubectl create grafana-admin-user secret
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureServiceConnection }}
            azureResourceGroup: ${{ parameters.AksResourceGroupName }}
            kubernetesCluster: ${{ parameters.AksClusterName }}
            useClusterAdmin: true
            namespace: $(KubernetesNamespace)
            secretType: generic
            secretArguments: --from-literal=admin-user=${{ parameters.GrafanaAdminUsername }} --from-literal=admin-password=${{ parameters.GrafanaAdminPassword }}
            secretName: grafana-admin-user
        - template: azure-pipelines-templates/deploy/step/kubernetes-create-ingress.yml@das-platform-building-blocks
          parameters:
            AksClusterName: ${{ parameters.AksClusterName }}
            AksResourceGroupName: ${{ parameters.AksResourceGroupName }}
            AppGatewayName: ${{ parameters.AppGatewayName }}
            AppGatewayResourceGroup: ${{ parameters.AppGatewayResourceGroup }}
            AzureServiceConnection: ${{ parameters.AzureServiceConnection }}
            IngressManifestPath: $(Pipeline.Workspace)/das-grafana/manifest/ingress.yml
            KeyVaultName: ${{ parameters.KeyVaultName }}
            Namespace: $(KubernetesNamespace)
        - template: azure-pipelines-templates/deploy/step/kubernetes-apply-manifest.yml@das-platform-building-blocks
          parameters:
            AksClusterName: ${{ parameters.AksClusterName }}
            AksResourceGroupName: ${{ parameters.AksResourceGroupName }}
            AzureServiceConnection: ${{ parameters.AzureServiceConnection }}
            KubectlVersion: ${{ parameters.KubectlVersion }}
            ManifestFile: $(Pipeline.Workspace)/das-grafana/manifest/volume-claim.yml
            Namespace: $(KubernetesNamespace)
        - template: ../step/test-grafana-online.yml
          parameters:
            GrafanaBaseUri: ${{ parameters.GrafanaBaseUri }}
            ContinueOnTimeout: true
        - template: azure-pipelines-templates/deploy/step/kubernetes-exec.yml@das-platform-building-blocks
          parameters:
            AksClusterName: ${{ parameters.AksClusterName }}
            AksResourceGroupName: ${{ parameters.AksResourceGroupName }}
            AzureServiceConnection: ${{ parameters.AzureServiceConnection }}
            Command: rm -f /etc/grafana/provisioning/datasources/datasources.yml
            Namespace: $(KubernetesNamespace)
            PodLabel: app.kubernetes.io/name=grafana
            ExecuteTasks: eq(variables.IsGrafanaOnline, 'true')
        - template: azure-pipelines-templates/deploy/step/kubernetes-upgrade-helmchart.yml@das-platform-building-blocks
          parameters:
            AdditionalChartRepoNameAndUrl: grafana https://grafana.github.io/helm-charts
            AksClusterName: ${{ parameters.AksClusterName }}
            AksResourceGroupName: ${{ parameters.AksResourceGroupName }}
            AzureServiceConnection: ${{ parameters.AzureServiceConnection }}
            ChartName: stable/grafana
            HelmClientVersion: ${{ parameters.HelmClientVersion }}
            HelmChartVersion: ${{ parameters.HelmChartVersion }}
            KubectlVersion: ${{ parameters.KubectlVersion }}
            Namespace: $(KubernetesNamespace)
            ReleaseName: grafana
            ValuesFile: $(Pipeline.Workspace)/das-grafana/helm.yml
        - template: ../step/test-grafana-online.yml
          parameters:
            GrafanaBaseUri: ${{ parameters.GrafanaBaseUri }}
        ## This approach is a placeholder to ensure that an organisation with the name "Apprenticeship Service" and id of 3 is created.  
        - task: PowerShell@2
          displayName: 'PowerShell: New-GrafanaOrg.ps1'
          inputs:
            filePath: $(Pipeline.Workspace)/das-grafana/tools/New-GrafanaOrg.ps1
            arguments: -GrafanaBaseUri ${{ parameters.GrafanaBaseUri }} -OrgName "Placeholder", "Apprenticeship Service" -Password ${{ parameters.GrafanaAdminPassword }} -Username ${{ parameters.GrafanaAdminUsername }} -Verbose
            pwsh: true
        - task: Kubernetes@1
          displayName: kubectl login
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureServiceConnection }}
            azureResourceGroup: ${{ parameters.AksResourceGroupName }}
            kubernetesCluster: ${{ parameters.AksClusterName }}
            useClusterAdmin: true
            command: login
        - task: PowerShell@2
          displayName: 'PowerShell: Copy-FileToContainer.ps1'
          inputs:
            filePath: $(Pipeline.Workspace)/das-grafana/tools/Copy-FileToContainer.ps1
            arguments: -Namespace $(KubernetesNamespace) -PodLabel app.kubernetes.io/name=grafana -SourceFilePath $(Pipeline.Workspace)/das-grafana/config/datasources/datasources.yml -TargetFilePath /etc/grafana/provisioning/datasources/datasources.yml -Verbose
            pwsh: true
        ## delete a grafana pod to force reapplication of config
        - task: Kubernetes@1
          displayName: kubectl get grafana pod names
          name: GetGrafanaPodNames
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureServiceConnection }}
            azureResourceGroup: ${{ parameters.AksResourceGroupName }}
            kubernetesCluster: ${{ parameters.AksClusterName }}
            useClusterAdmin: true
            namespace: $(KubernetesNamespace)
            command: get
            arguments: 'pod -l app.kubernetes.io/name=grafana'
            outputFormat: name
        - pwsh: |
            $Name = "$(GetGrafanaPodNames.KubectlOutput)[0]"
            Write-Output "Setting PodName variable to $Name"
            Write-Output "##vso[task.setvariable variable=GrafanaPodName]$Name"
          displayName: 'PowerShell: Output PodName'
        - task: Kubernetes@1
          displayName: kubectl delete one grafana pod"
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureServiceConnection }}
            azureResourceGroup: ${{ parameters.AksResourceGroupName }}
            kubernetesCluster: ${{ parameters.AksClusterName }}
            useClusterAdmin: true
            namespace: $(KubernetesNamespace)
            command: delete
            arguments: '$(GrafanaPodName)'
